"use strict";
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var pluralize_1 = require("pluralize");
var prisma_datamodel_1 = require("prisma-datamodel");
var ModelNameNormalizer = /** @class */ (function () {
    function ModelNameNormalizer() {
    }
    ModelNameNormalizer.prototype.normalize = function (model) {
        var e_1, _a;
        try {
            // We need to sort types according to topological order for name normalization.
            // Otherwise embedded type naming might break as embedded types depend on
            // their parent type.
            for (var _b = __values(prisma_datamodel_1.toposort(model.types)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var type = _c.value;
                this.normalizeType(type, model);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    ModelNameNormalizer.prototype.assignName = function (obj, newName) {
        if (obj.databaseName === null) {
            // If name was already changed, we don't touch it.
            if (newName !== obj.name) {
                // If name is already conforming to prisma, skip.
                obj.databaseName = obj.name;
                obj.name = newName;
            }
        }
    };
    ModelNameNormalizer.prototype.normalizeType = function (type, parentModel, forceNoRename) {
        if (forceNoRename === void 0) { forceNoRename = false; }
        var e_2, _a;
        if (!forceNoRename) {
            this.assignName(type, prisma_datamodel_1.capitalize(pluralize_1.singular(type.name)));
        }
        try {
            for (var _b = __values(type.fields), _c = _b.next(); !_c.done; _c = _b.next()) {
                var field = _c.value;
                this.normalizeField(field, type, parentModel);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
    };
    ModelNameNormalizer.prototype.normalizeField = function (field, parentType, parentModel) {
        // Make embedded type names pretty
        if (typeof field.type !== 'string' && field.type.isEmbedded) {
            if (!field.type.databaseName)
                field.type.databaseName = field.type.name;
            field.type.name = parentType.name + prisma_datamodel_1.capitalize(pluralize_1.singular(field.name));
        }
    };
    return ModelNameNormalizer;
}());
exports.default = ModelNameNormalizer;
//# sourceMappingURL=modelNameNormalizer.js.map
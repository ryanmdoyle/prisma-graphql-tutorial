"use strict";
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * We remove the relation name of type pairs which have exactly a single relation between them.
 * Except the relation name is explicitely declared in the base model. Then, we keep it.
 */
var RemoveRelationName = /** @class */ (function () {
    function RemoveRelationName(baseModel) {
        this.baseModel = baseModel;
    }
    RemoveRelationName.prototype.normalizeType = function (type, ref) {
        var e_1, _a;
        var _loop_1 = function (field) {
            if (typeof field.type !== 'string' && field.relationName !== null) {
                // Hola, relation!
                var otherRelationOfSameTypeCount = type.fields.filter(function (x) { return x.type === field.type && x !== field; }).length;
                var otherBackRelationCount = field.type.fields.filter(function (x) { return x.type == type && x !== field.relatedField; }).length;
                if (otherRelationOfSameTypeCount > 0 || otherBackRelationCount > 0)
                    return "continue"; // We need a relation name directive here
                if (ref !== undefined) {
                    var refField = ref.fields.find(function (x) { return x.name === field.name; });
                    if (refField !== undefined && refField.relationName !== null)
                        return "continue"; // Ref model has database name
                }
                // All checks passed, remove relation name
                if (field.relatedField !== null)
                    field.relatedField.relationName = null;
                field.relationName = null;
            }
        };
        try {
            for (var _b = __values(type.fields), _c = _b.next(); !_c.done; _c = _b.next()) {
                var field = _c.value;
                _loop_1(field);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    RemoveRelationName.prototype.normalize = function (model) {
        var e_2, _a;
        var _loop_2 = function (type) {
            // TODO: We should move all tooling for finding types or fields into some common class.
            var ref = this_1.baseModel !== null
                ? this_1.baseModel.types.find(function (x) { return x.name === type.name || x.databaseName === type.name; })
                : undefined;
            this_1.normalizeType(type, ref);
        };
        var this_1 = this;
        try {
            for (var _b = __values(model.types), _c = _b.next(); !_c.done; _c = _b.next()) {
                var type = _c.value;
                _loop_2(type);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
    };
    return RemoveRelationName;
}());
exports.RemoveRelationName = RemoveRelationName;
//# sourceMappingURL=removeRelationNames.js.map
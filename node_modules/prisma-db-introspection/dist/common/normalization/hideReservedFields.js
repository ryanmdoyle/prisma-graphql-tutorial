"use strict";
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var prisma_datamodel_1 = require("prisma-datamodel");
var HideReservedFields = /** @class */ (function () {
    function HideReservedFields(baseModel) {
        this.baseModel = baseModel;
    }
    HideReservedFields.prototype.normalizeType = function (type, ref) {
        var e_1, _a;
        var _loop_1 = function (reservedField) {
            var field = type.fields.find(function (x) { return x.name === reservedField; });
            var refField = ref.fields.find(function (x) { return x.name === reservedField; });
            // Remove reserved field if not found in ref type.
            if (field !== undefined && refField === undefined) {
                type.fields = type.fields.filter(function (x) { return x !== field; });
            }
        };
        try {
            for (var _b = __values(HideReservedFields.reservedFields), _c = _b.next(); !_c.done; _c = _b.next()) {
                var reservedField = _c.value;
                _loop_1(reservedField);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    HideReservedFields.prototype.normalize = function (model) {
        var e_2, _a;
        var _loop_2 = function (type) {
            // We should move all tooling for finding types or fields into some common class.
            var ref = this_1.baseModel.types.find(function (x) { return x.name === type.name || x.databaseName === type.name; });
            if (ref !== undefined) {
                this_1.normalizeType(type, ref);
            }
        };
        var this_1 = this;
        try {
            for (var _b = __values(model.types), _c = _b.next(); !_c.done; _c = _b.next()) {
                var type = _c.value;
                _loop_2(type);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
    };
    HideReservedFields.reservedFields = [
        prisma_datamodel_1.LegacyRelationalReservedFields.createdAtFieldName,
        prisma_datamodel_1.LegacyRelationalReservedFields.updatedAtFieldName,
        prisma_datamodel_1.LegacyRelationalReservedFields.idFieldName,
    ];
    return HideReservedFields;
}());
exports.HideReservedFields = HideReservedFields;
//# sourceMappingURL=hideReservedFields.js.map
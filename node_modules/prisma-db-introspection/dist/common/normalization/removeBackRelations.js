"use strict";
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var RemoveBackRelation = /** @class */ (function () {
    function RemoveBackRelation(baseModel) {
        this.baseModel = baseModel;
    }
    RemoveBackRelation.prototype.normalizeType = function (type, ref) {
        var _loop_1 = function (i) {
            var field = type.fields[i];
            if (typeof field.type !== 'string' && field.relatedField !== null) {
                // Fid the reference field.
                var refField = ref.fields.find(function (x) { return x.name === field.name; });
                if (refField === undefined || typeof refField.type === 'string')
                    return out_i_1 = i, "continue";
                if (refField.type.name !== field.type.name)
                    return out_i_1 = i, "continue";
                // If the reference field has no related field  we drop it.
                if (refField.relatedField === null) {
                    var relatedType = field.type;
                    relatedType.fields = relatedType.fields.filter(function (x) { return x !== field.relatedField; });
                    field.relatedField = null;
                    // Restart search in case we modified our own type.
                    if (relatedType === type) {
                        i = 0;
                    }
                }
            }
            out_i_1 = i;
        };
        var out_i_1;
        // Here, we explicitely need a classic for loop,
        // as we need to restart it in the case of
        // self-referencing relations. Otherwise
        // we might end up removing too many relations.
        for (var i = 0; i < type.fields.length; i++) {
            _loop_1(i);
            i = out_i_1;
        }
    };
    RemoveBackRelation.prototype.normalize = function (model) {
        var e_1, _a;
        var _loop_2 = function (type) {
            // TODO: We should move all tooling for finding types or fields into some common class.
            var ref = this_1.baseModel.types.find(function (x) { return x.name === type.name || x.databaseName === type.name; });
            if (ref !== undefined) {
                this_1.normalizeType(type, ref);
            }
        };
        var this_1 = this;
        try {
            for (var _b = __values(model.types), _c = _b.next(); !_c.done; _c = _b.next()) {
                var type = _c.value;
                _loop_2(type);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    return RemoveBackRelation;
}());
exports.RemoveBackRelation = RemoveBackRelation;
//# sourceMappingURL=removeBackRelations.js.map
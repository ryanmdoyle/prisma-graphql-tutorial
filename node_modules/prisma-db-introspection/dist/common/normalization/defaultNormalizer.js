"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var normalizerGroup_1 = require("./normalizerGroup");
var modelNameAndDirectiveNormalizer_1 = require("./modelNameAndDirectiveNormalizer");
var modelOrderNormalizer_1 = require("./modelOrderNormalizer");
var prisma_datamodel_1 = require("prisma-datamodel");
var hideReservedFields_1 = require("./hideReservedFields");
var removeRelationNames_1 = require("./removeRelationNames");
var removeBackRelations_1 = require("./removeBackRelations");
var adjustJoinTableCardinality_1 = require("./adjustJoinTableCardinality");
var copyEnums_1 = require("./copyEnums");
var DefaultNormalizer = /** @class */ (function () {
    function DefaultNormalizer() {
    }
    DefaultNormalizer.create = function (databaseType, baseModel) {
        if (baseModel === null) {
            return this.createWithoutBaseModel(databaseType);
        }
        else {
            return this.createWithBaseModel(databaseType, baseModel);
        }
    };
    DefaultNormalizer.createWithoutBaseModel = function (databaseType) {
        if (databaseType === prisma_datamodel_1.DatabaseType.mongo) {
            // Document normalization
            return new normalizerGroup_1.default([
                new modelNameAndDirectiveNormalizer_1.default(null),
                new removeRelationNames_1.RemoveRelationName(null),
                new modelOrderNormalizer_1.default(null),
            ]);
        }
        else {
            // Relational normalization
            return new normalizerGroup_1.default([
                new modelNameAndDirectiveNormalizer_1.default(null),
                new removeRelationNames_1.RemoveRelationName(null),
                new modelOrderNormalizer_1.default(null),
            ]);
        }
    };
    DefaultNormalizer.createWithBaseModel = function (databaseType, baseModel) {
        if (databaseType === prisma_datamodel_1.DatabaseType.mongo) {
            // Document normalization with base model
            return new normalizerGroup_1.default([
                new copyEnums_1.CopyEnums(baseModel),
                new removeRelationNames_1.RemoveRelationName(baseModel),
                new modelNameAndDirectiveNormalizer_1.default(baseModel),
                new modelOrderNormalizer_1.default(baseModel),
                new removeBackRelations_1.RemoveBackRelation(baseModel),
            ]);
        }
        else {
            // Relational normalization with base model
            return new normalizerGroup_1.default([
                new copyEnums_1.CopyEnums(baseModel),
                new removeRelationNames_1.RemoveRelationName(baseModel),
                new modelNameAndDirectiveNormalizer_1.default(baseModel),
                new modelOrderNormalizer_1.default(baseModel),
                new hideReservedFields_1.HideReservedFields(baseModel),
                new adjustJoinTableCardinality_1.AdjustJoinTableCardinality(baseModel),
                new removeBackRelations_1.RemoveBackRelation(baseModel),
            ]);
        }
    };
    return DefaultNormalizer;
}());
exports.default = DefaultNormalizer;
//# sourceMappingURL=defaultNormalizer.js.map